#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'

require 'amqp'
require 'mongoid'
require 'cloudfiles'

CONFIG_DIR = File.join(File.dirname(File.expand_path(__FILE__)), "..", "config")

unless Dir.exist?(CONFIG_DIR)
  raise(Errno::ENOENT, "No such directory - #{CONFIG_DIR}")
end

CF = YAML.load_file(File.join(CONFIG_DIR, "cloudfiles.yml"))["development"]
MQ = YAML.load_file(File.join(CONFIG_DIR, "mq.yml"))["development"]

Mongoid.load!(File.join(CONFIG_DIR, "mongoid.yml"), :development)

class Image
  include Mongoid::Document

  field :md5, :type => String
  index({ :md5 => 1 }, { :unique => true, :name => "md5_index" })

  field :author, :type => String
  
  field :cdn_url, :type => String

  def url(type = :orig)
    case type
    when :orig
      cdn_url
    when :thumb, :small, :medium, :large
      cdn_url + "-" + type.to_s
    else
      raise ArgumentError.new("Unknown URL type, #{type}")
    end
  end
end

# More input sanitization for configs? - Wuest

AMQP.start(MQ["uri"]) do |connection|
  Signal.trap('INT') { connection.close { EventMachine.stop } }
  Signal.trap('TERM') { connection.close { EventMachine.stop } }

  channel = AMQP::Channel.new(connection)

  channel.queue("savvy.images", :auto_delete => true).subscribe do |payload|

    image = Image.where(:md5 => payload).first

    cloudfiles = CloudFiles::Connection.new(:username => CF["username"], :api_key => CF["password"])
    container = cloudfiles.container(image.author)
    object = container.object("#{payload}")

    begin
      image = Magick::Image.read(object)

      if image.empty?
        # Add error handling here in case Magick doesn't blow up
      else
        # This is bad--multi layer formats will 
        image = image.first

        [ :thumb, :small, :medium, :large ].each do |type|
          container.create_object("#{payload}-#{type}", false)
          object.write(image.change_geometry(
            case type 
            when :thumb "100x100" 
            when :small "640x480"
            when :medium "800x600"
            when :large "1024x768"
            end) { |cols,rows,img| img.resize!(cols, rows) }
        end

      end
    rescue
      # Recover from problems from reading the image, image resize, etc
    end
  end
end

