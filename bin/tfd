#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'tempfile'

require 'amqp'
require 'mongoid'
require 'cloudfiles'

CONFIG_DIR = File.join(File.dirname(File.expand_path(__FILE__)), "..", "config")

unless Dir.exist?(CONFIG_DIR)
  raise(Errno::ENOENT, "No such directory - #{CONFIG_DIR}")
end

CF = YAML.load_file(File.join(CONFIG_DIR, "cloudfiles.yml"))["development"]
MQ = YAML.load_file(File.join(CONFIG_DIR, "mq.yml"))["development"]

Mongoid.load!(File.join(CONFIG_DIR, "mongoid.yml", :development))

class Image
  include Mongoid::Document

  field :md5, :type => String
  field :author, :type => String
  
  field :orig_url, :type => String
  field :thumb_url, :type => String
  field :small_url, :type => String
  field :medium_url, :type => String
  field :large_url, :type => String

  field :created_at, :type => Date
end

# More input sanitization for configs? - Wuest

AMQP.start(MQ["uri"]) do |connection|
  Signal.trap('INT') { connection.close { EventMachine.stop } }
  Signal.trap('TERM') { connection.close { EventMachine.stop } }

  channel = AMQP::Channel.new(connection)

  channel.queue("savvy.images", :auto_delete => true).subscribe do |payload|

    image = Image.where(:md5 => payload)

    cloudfiles = CloudFiles::Connection.new(:username => CF["username"], :api_key => CF["password"])
    container = cloudfiles.container(image.author)
    object = container.object("#{payload}-orig")

    # TODO Mime check?
    
    image_file = Tempfile.new("wb")
    image_file.write(object.data)

    begin
      image = Magick::Image.read(image_file.path)

      if image.empty?
        # Add error handling here in case Magick doesn't blow up
      else
        # This is bad--multi layer formats will 
        image = image.first

        images = {}

        images["thumb"] = image.change_geometry("100x100") { |cols,rows,img| img.resize!(cols, rows) }
        images["small"] = image.change_geometry("640x480") { |cols,rows,img| img.resize!(cols, rows) }
        images["medium"] = image.change_geometry("800x600") { |cols,rows,img| img.resize!(cols, rows) }
        images["large"] = image.change_geometry("1024x768") { |cols,rows,img| img.resize!(cols, rows) }

        images.each do |key,value|
          object = container.create_object("#{payload}-#{key}", false)
          object.write(value)
        end
      end
    rescue
      # Recover from problems from reading the image, image resize, etc
    ensure
      image_file.close
    end
  end
end

